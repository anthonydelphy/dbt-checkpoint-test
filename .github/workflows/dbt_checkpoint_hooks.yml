name: dbt Checkpoint Hooks

on:
  pull_request:
    branches:
      - main  # Only run this workflow for PRs targeting the 'main' branch

jobs:
  dbt-checkpoint:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Required to compare full commit history (for git diff)

      # Step 2: Set up Python environment
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Step 3: Install dbt-core, dbt-snowflake, pre-commit, and dbt-checkpoint
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit dbt-core dbt-snowflake
          pip install git+https://github.com/dbt-checkpoint/dbt-checkpoint.git

      # Step 4: Copy dummy dbt profile (used for parsing only, no DB connection)
      - name: Set up dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cp .github/dummy_profiles.yml ~/.dbt/profiles.yml

      # Step 5: Install dbt dependencies from packages.yml
      - name: Install dbt packages
        run: dbt deps

      # Step 6: Parse the dbt project to populate manifest.json
      - name: Parse dbt project (no database connection)
        run: dbt parse

      # Step 7: Get changed .sql files between base (start of PR) and current commit
      - name: Get changed SQL files from PR base
        id: get_sql_files
        run: |
          base_sha="${{ github.event.pull_request.base.sha }}"
          head_sha="${GITHUB_SHA}"

          echo "Comparing base $base_sha to head $head_sha"

          files=$(git diff --name-only "$base_sha" "$head_sha" -- '*.sql')

          echo "sql_files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 8: Run dbt-checkpoint hooks (via pre-commit) on changed files only
      - name: Run dbt-checkpoint only on changed files
        id: run_checkpoint
        continue-on-error: true  # Allow summary step to always run
        run: |
          read -r -a files <<< "${{ steps.get_sql_files.outputs.sql_files }}"
          if [ -z "${files[*]}" ]; then
            echo "No changed SQL files to check." | tee checkpoint_output.txt
            echo "exit_code=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Checking: ${files[*]}"
          SKIP=sqlfluff-fix pre-commit run --files "${files[@]}" | tee checkpoint_output.txt
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT


      # Step 9: Clean output and write results to GitHub job summary
      - name: Add dbt-checkpoint summary to GitHub job summary
        run: |
          echo '### dbt-checkpoint Summary' >> $GITHUB_STEP_SUMMARY

          if [ ! -f checkpoint_output.txt ]; then
            echo 'No dbt-checkpoint output was generated. Likely no .sql files were modified.' >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Strip ANSI color codes
          sed -r "s:\x1B\[[0-9;]*[mK]::g" checkpoint_output.txt > clean_output.txt

          echo '' >> $GITHUB_STEP_SUMMARY
          echo '**Files checked:**' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.get_sql_files.outputs.sql_files }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          if grep -q "Failed" clean_output.txt; then
            echo '⚠️ Some dbt-checkpoint checks failed. Please review the output below.' >> $GITHUB_STEP_SUMMARY
          else
            echo '✅ All dbt-checkpoint checks passed successfully!' >> $GITHUB_STEP_SUMMARY
          fi

          echo '' >> $GITHUB_STEP_SUMMARY
          echo '**Detailed Output:**' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat clean_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Step 10: Succeed/Fail Workflow depending on results
      - name: Fail job if dbt-checkpoint failed
        run: |
          exit_code="${{ steps.run_checkpoint.outputs.exit_code }}"

          if [ "$exit_code" -ne 0 ]; then
            echo "dbt-checkpoint checks failed. See below for details:"
            echo "------------------------------------------------------"
            cat clean_output.txt || echo "clean_output.txt not found"
            echo "------------------------------------------------------"
            exit $exit_code
          else
            echo "All checks passed."
          fi
